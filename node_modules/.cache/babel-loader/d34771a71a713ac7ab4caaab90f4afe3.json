{"ast":null,"code":"var _jsxFileName = \"/home/mik/sites/react/todolist/src/components/list.js\";\nimport React from 'react';\n\nconst List = () => {\n  render();\n  const _this$props = this.props,\n        button = _this$props.button,\n        isDone = _this$props.isDone,\n        task = _this$props.task,\n        removeTask = _this$props.removeTask;\n  let buttonSwitch = null;\n\n  if (isDone) {\n    buttonSwitch = \"reset done\";\n  } else {\n    buttonSwitch = \"mark as done\";\n  }\n\n  return React.createElement(\"div\", {\n    className: \"list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    \"data-done\": isDone,\n    style: ({\n      backgroundColor: isDone === true ? 'grey' : 'green'\n    }, {\n      textDecorationLine: isDone === true ? 'line-through' : 'none'\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, task), React.createElement(\"div\", {\n    className: \"buttonList\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    onClick: button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, buttonSwitch), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: removeTask,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"remove\")));\n};\n\nexport default List;","map":{"version":3,"sources":["/home/mik/sites/react/todolist/src/components/list.js"],"names":["React","List","render","props","button","isDone","task","removeTask","buttonSwitch","backgroundColor","textDecorationLine"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAEfC,EAAAA,MAAM;AAFS,sBAI4B,KAAKC,KAJjC;AAAA,QAITC,MAJS,eAITA,MAJS;AAAA,QAIDC,MAJC,eAIDA,MAJC;AAAA,QAIOC,IAJP,eAIOA,IAJP;AAAA,QAIaC,UAJb,eAIaA,UAJb;AAMd,MAAIC,YAAY,GAAG,IAAnB;;AACA,MAAIH,MAAJ,EAAY;AACXG,IAAAA,YAAY,GAAG,YAAf;AACA,GAFD,MAGK;AACJA,IAAAA,YAAY,GAAG,cAAf;AACA;;AAEE,SACC;AAAK,IAAA,SAAS,EAAG,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AACC,iBAAaH,MADd;AAEC,IAAA,KAAK,GACF;AAAEI,MAAAA,eAAe,EAAOJ,MAAM,KAAK,IAAX,GAAkB,MAAlB,GAA2B;AAAnD,OACA;AAAEK,MAAAA,kBAAkB,EAAIL,MAAM,KAAK,IAAX,GAAkB,cAAlB,GAAmC;AAA3D,KAFE,CAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGC,IAPH,CADJ,EAUI;AAAK,IAAA,SAAS,EAAG,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AACC,IAAA,IAAI,EAAG,QADR;AAEC,IAAA,OAAO,EAAKF,MAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGI,YAJH,CADD,EAOC;AACC,IAAA,IAAI,EAAG,QADR;AAEC,IAAA,OAAO,EAAKD,UAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPD,CAVJ,CADD;AA2BP,CAzCD;;AA2CA,eAAeN,IAAf","sourcesContent":["import React from 'react';\n\nconst List = () => {\n\n    render() \n\n\t\tconst { button, isDone, task, removeTask } = this.props;\n\n    \tlet buttonSwitch = null;\n    \tif (isDone) {\n    \t\tbuttonSwitch = \"reset done\"\n    \t}\n    \telse {\n    \t\tbuttonSwitch = \"mark as done\"\n    \t}\n    \t\n        return (\n        \t<div className = 'list' >\n\t           \t<li \n\t           \t\tdata-done = {isDone} \n\t           \t\tstyle = {\n\t           \t\t\t\t\t{ backgroundColor     : isDone === true ? 'grey' : 'green' },\n\t           \t\t\t\t\t{ textDecorationLine  : isDone === true ? 'line-through' : 'none'}\n\t           \t\t\t\t} \n\t           \t>\n\t           \t\t{ task }\n\t           \t</li>\n\t           \t<div className = 'buttonList'>\n\t\t           \t<button  \n\t\t           \t\ttype = 'button'\n\t\t           \t\tonClick = { button }  \n\t\t           \t>\n\t\t           \t\t{ buttonSwitch }\n\t\t           \t</button>\n\t\t           \t<button  \n\t\t           \t\ttype = 'button'\n\t\t           \t\tonClick = { removeTask }  \n\t\t           \t>\n\t\t           \t\tremove\n\t\t           \t</button>\n\t           \t</div>\n\t        </div>\n        );\n}\n\nexport default List;\n"]},"metadata":{},"sourceType":"module"}