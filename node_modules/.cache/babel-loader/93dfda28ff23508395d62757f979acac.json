{"ast":null,"code":"var _jsxFileName = \"/home/mik/sites/react/todolist/src/components/list.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass List extends Component {\n  render() {\n    const _this$props = this.props,\n          button = _this$props.button,\n          isDone = _this$props.isDone,\n          content = _this$props.content,\n          removeTask = _this$props.removeTask;\n    let buttonSwitch = null;\n\n    if (isDone) {\n      buttonSwitch = \"reset done\";\n    } else {\n      buttonSwitch = \"mark as done\";\n    }\n\n    return React.createElement(\"div\", {\n      className: \"list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      \"data-done\": isDone,\n      style: {\n        backgroundColor: isDone === true ? 'grey' : 'orange',\n        textDecorationLine: isDone === true ? 'line-through' : 'none'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, content), React.createElement(\"div\", {\n      className: \"buttonList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      onClick: button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, buttonSwitch), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: removeTask,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"remove\")));\n  }\n\n}\n\nList.propTypes = {\n  button: PropTypes.func.isRequired,\n  isDone: PropTypes.bool.isRequired,\n  // task: PropTypes.array.isRequired,\n  removeTask: PropTypes.func.isRequired\n};\nexport default List;","map":{"version":3,"sources":["/home/mik/sites/react/todolist/src/components/list.js"],"names":["React","Component","PropTypes","List","render","props","button","isDone","content","removeTask","buttonSwitch","backgroundColor","textDecorationLine","propTypes","func","isRequired","bool"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,IAAN,SAAmBF,SAAnB,CAA6B;AASzBG,EAAAA,MAAM,GAAG;AAAA,wBAEoC,KAAKC,KAFzC;AAAA,UAEHC,MAFG,eAEHA,MAFG;AAAA,UAEKC,MAFL,eAEKA,MAFL;AAAA,UAEaC,OAFb,eAEaA,OAFb;AAAA,UAEsBC,UAFtB,eAEsBA,UAFtB;AAIR,QAAIC,YAAY,GAAG,IAAnB;;AACA,QAAIH,MAAJ,EAAY;AACXG,MAAAA,YAAY,GAAG,YAAf;AACA,KAFD,MAGK;AACJA,MAAAA,YAAY,GAAG,cAAf;AACA;;AAEE,WACC;AAAK,MAAA,SAAS,EAAG,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AACC,mBAAaH,MADd;AAEC,MAAA,KAAK,EACF;AACCI,QAAAA,eAAe,EAAOJ,MAAM,KAAK,IAAX,GAAkB,MAAlB,GAA2B,QADlD;AAECK,QAAAA,kBAAkB,EAAIL,MAAM,KAAK,IAAX,GAAkB,cAAlB,GAAmC;AAF1D,OAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OASPC,OATO,CADJ,EAYI;AAAK,MAAA,SAAS,EAAG,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AACC,MAAA,IAAI,EAAG,QADR;AAEC,MAAA,OAAO,EAAKF,MAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIGI,YAJH,CADD,EAOC;AACC,MAAA,IAAI,EAAG,QADR;AAEC,MAAA,OAAO,EAAKD,UAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPD,CAZJ,CADD;AA6BH;;AAlDwB;;AAAvBN,I,CAEEU,S,GAAY;AAClBP,EAAAA,MAAM,EAAEJ,SAAS,CAACY,IAAV,CAAeC,UADL;AAEfR,EAAAA,MAAM,EAAEL,SAAS,CAACc,IAAV,CAAeD,UAFR;AAGf;AACAN,EAAAA,UAAU,EAAEP,SAAS,CAACY,IAAV,CAAeC;AAJZ,C;AAmDpB,eAAeZ,IAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass List extends Component {\n\n\tstatic propTypes = {\n\t\tbutton: PropTypes.func.isRequired,\n\t    isDone: PropTypes.bool.isRequired,\n\t    // task: PropTypes.array.isRequired,\n\t    removeTask: PropTypes.func.isRequired\n\t}\n\n    render() {\n\n\t\tconst { button, isDone, content, removeTask} = this.props;\n\n    \tlet buttonSwitch = null;\n    \tif (isDone) {\n    \t\tbuttonSwitch = \"reset done\";\n    \t}\n    \telse {\n    \t\tbuttonSwitch = \"mark as done\";\n    \t}\n    \t\n        return (\n        \t<div className = 'list'  >\n\t           \t<li \n\t           \t\tdata-done = {isDone} \n\t           \t\tstyle = {\n\t           \t\t\t\t\t{\n\t           \t\t\t\t\t\tbackgroundColor     : isDone === true ? 'grey' : 'orange' ,\n\t           \t\t\t\t\t\ttextDecorationLine  : isDone === true ? 'line-through' : 'none'\n\t           \t\t\t\t\t}\n\t           \t\t\t\t} \n\t           \t>\n\t\t\t\t\t{content }\n\t           \t</li>\n\t           \t<div className = 'buttonList'>\n\t\t           \t<button  \n\t\t           \t\ttype = 'button'\n\t\t           \t\tonClick = { button }  \n\t\t           \t>\n\t\t           \t\t{ buttonSwitch }\n\t\t           \t</button>\n\t\t           \t<button  \n\t\t           \t\ttype = 'button'\n\t\t           \t\tonClick = { removeTask }  \n\t\t           \t>\n\t\t           \t\tremove\n\t\t           \t</button>\n\t           \t</div>\n\t        </div>\n        );\n    }\n}\n\nexport default List;\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}